### ideas
1) Garment Type Detection: high neck, long selves, 
2) Occasion recomender (party, work, gym)
3) Counterfeit Fashion Detection (Anti-Fake AI): logo mismatches, stitching, proportions
4) poser: so like multiple people can try ons at the same time and do like group poses (like a photo booth thing)
5) cloth picker game: so like we can have 5 player that can pick clothes for each other which they think would look good, then like each person can give a review by doing VITON 


### 1) cloth picker game
steps to solve the problem(V1)
step 1: ask the number of player and timer settings, no. of rounds
step 2: get photos of all the clothes
step 3(add later): have options to sort by color & other stuff
step 4: each player takes n-1 dress that they think will look good on rest n-1 players
step 5: for each player n-1 dresses are there to choose,they do VITON for each, from which he/she gives the order in which she liked(rank1 = n points , rank2 = n-1 points and so on)
step 6: score aggregation, round leaderboard and final leaderboard visualization
step 7(optional): LLM comentatry

next set of improvemnets (V2):
1) adding timer using time.sleep() having a count down side by side
2) get actual clothes in the dataset, load like 10 of them
3) optional(ignore): how we can segregate in real time, using different multiple machines
4) do indexing for getting cloth id and picking the cloth for simplicity
5) in leaderboard it should add the points to the player chosen the cloth not the cloth itself
6) printing the countdonwn in parallel to what is already being done
7) remove reprinting of clothes that can be selected
8) updating timer inplace without overlap 
9) reset timer only when going for the next player

next set of improvemnets (V3):
1) fix overlapping for while printing preference
2) shows the images, not just the text
3) remove timer when used like for player 1 for all players in all rounds when used
4) error handeling in different case senarios
5) show how the VITON would give the person with the clothes on the basis of which they rate





import os
import random
import threading
import time
import msvcrt
import sys

def get_game_settings():
    num_players = int(input("Enter number of players: "))
    num_rounds = int(input("Enter number of rounds: "))
    timer = int(input("Enter timer (seconds) for each pick: "))
    players = [f"Player_{i+1}" for i in range(num_players)]
    return players, num_rounds, timer

def get_clothes_list(cloth_dir, n=10):
    all_clothes = [f for f in os.listdir(cloth_dir) if f.endswith('.jpg')]
    clothes = random.sample(all_clothes, n)
    return clothes

def countdown_inplace(seconds, stop_event):
    for i in range(seconds, 0, -1):
        if stop_event.is_set():
            break
        sys.stdout.write(f"\rTime left: {i} seconds   ")
        sys.stdout.flush()
        time.sleep(1)
    sys.stdout.write("\r" + " " * 30 + "\r")
    sys.stdout.flush()

def get_input_with_timeout(prompt, timeout):
    print()  # Ensure prompt is on a new line
    result = ''
    stop_event = threading.Event()
    timer_thread = threading.Thread(target=countdown_inplace, args=(timeout, stop_event))
    timer_thread.daemon = True
    timer_thread.start()
    print(prompt, end='', flush=True)
    start_time = time.time()
    while True:
        if msvcrt.kbhit():
            char = msvcrt.getwche()
            if char == '\r' or char == '\n':
                break
            result += char
        if time.time() - start_time > timeout:
            print("\nTime's up!")
            result = ''
            break
    stop_event.set()
    timer_thread.join()
    return result.strip()

def player_pick_for_others(player, players, clothes, timer):
    picks = {}
    print(f"\n{player}, it's your turn to pick clothes for others!")
    print("Available clothes:")
    for idx, cloth in enumerate(clothes):
        print(f"{idx}: {cloth}")
    time_left = timer
    for other in players:
        if other == player:
            continue
        user_input = ''
        stop_event = threading.Event()
        time_left_container = [time_left]
        # Start timer for this pick
        def countdown():
            for i in range(time_left_container[0], 0, -1):
                if stop_event.is_set():
                    break
                time_left_container[0] = i
                sys.stdout.write(f"\rTime left: {i} seconds ")
                sys.stdout.flush()
                time.sleep(1)
            if not stop_event.is_set():
                time_left_container[0] = 0
        timer_thread = threading.Thread(target=countdown)
        timer_thread.daemon = True
        timer_thread.start()
        # Prompt
        sys.stdout.write(f"\n{player}, pick a cloth for {other} (enter index 0-{len(clothes)-1}):\n")
        sys.stdout.flush()
        start_time = time.time()
        while True:
            if msvcrt.kbhit():
                char = msvcrt.getwche()
                if char in ('\r', '\n'):
                    break
                elif char == '\b':
                    user_input = user_input[:-1]
                elif char.isdigit():
                    user_input += char
            # Check timer
            if time_left_container[0] == 0 or (time.time() - start_time) >= time_left:
                print("\nTime's up! Moving to next player.")
                stop_event.set()
                timer_thread.join()
                return picks
        stop_event.set()
        timer_thread.join()
        # Calculate time used
        time_used = int(time.time() - start_time)
        time_left -= time_used
        # Clear timer line
        sys.stdout.write("\r" + " " * 40 + "\r")
        sys.stdout.flush()
        if user_input == '':
            print("No input. Skipping this pick.")
            continue
        if user_input.isdigit() and int(user_input) in range(len(clothes)):
            picks[other] = int(user_input)
        else:
            print("Invalid choice. Skipping this pick.")
        if time_left <= 0:
            print("No time left for more picks.")
            break
    return picks

def viton_and_ranking(player, received_clothes, clothes, timer):
    print(f"\n{player}, you have received these clothes to try on:")
    for idx in received_clothes:
        print(f"{idx}: {clothes[idx]}")
    prompt = f"Rank them from most to least favorite (comma-separated indices, e.g. {','.join(str(i) for i in received_clothes)}): "
    ranking_str = get_input_with_timeout(prompt, timer)
    ranking = [int(r.strip()) for r in ranking_str.split(',') if r.strip().isdigit() and int(r.strip()) in received_clothes]
    return ranking

def aggregate_scores(all_rankings, picks_for_others, leaderboard, players):
    for player, ranking in all_rankings.items():
        n = len(ranking)
        for rank, cloth_idx in enumerate(ranking):
            # Find who picked this cloth for the player
            for other in players:
                if other != player and picks_for_others[other][player] == cloth_idx:
                    points = n - rank
                    leaderboard[other] += points

def print_leaderboard(leaderboard, round_num):
    print(f"\nLeaderboard after round {round_num}:")
    for player, score in leaderboard.items():
        print(f"{player}: {score}")

def cloth_picker_game():
    cloth_dir = "clothes_tryon_dataset/train/cloth"
    players, num_rounds, timer = get_game_settings()
    clothes = get_clothes_list(cloth_dir, n=10)
    leaderboard = {player: 0 for player in players}

    for rnd in range(1, num_rounds+1):
        print(f"\n--- Round {rnd} ---")
        picks_for_others = {player: player_pick_for_others(player, players, clothes, timer) for player in players}
        all_rankings = {}
        for player in players:
            received = [picks_for_others[other][player] for other in players if other != player]
            ranking = viton_and_ranking(player, received, clothes, timer)
            all_rankings[player] = ranking
        aggregate_scores(all_rankings, picks_for_others, leaderboard, players)
        print_leaderboard(leaderboard, rnd)

    print("\nFinal Leaderboard:")
    print_leaderboard(leaderboard, "Final")

if __name__ == "__main__":
    cloth_picker_game()
